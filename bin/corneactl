#!/usr/bin/env perl
use strict;

# TODO fix the lib path to be better (or install)
use lib '/cornea/perl/lib';
use lib 'perl/lib';
use Carp;
use Cornea;
use Cornea::Config;
use Cornea::RecallTable;
use Cornea::Utils;
use Getopt::Long;
use IO::File;
use POSIX qw/setsid/;
use Socket;
use Switch;
use YAML;

our $DEBUG = 0;

sub exit_msg {
  my $exit_code = shift;
  my $message = shift || ($exit_code ? 'failure' : 'success');
  print "$message\n";
  exit($exit_code);
}

my $conf_file;
my $interval;
GetOptions("c=s" => \$conf_file,
           "i=i" => \$interval,
           "d" => \$DEBUG);
my $conf = Cornea::Config->new($conf_file);

my $cmd = shift;
my $rt = Cornea::RecallTable->new();

sub usage {
  print <<EOF;
$0 [-c conf_file] <command> [args]

Commands:

	list-metanodes

	init-metanode

	init-peer-metanode <nodename>

	first-sync-peer-metanode <nodename>

	drop-peer-metanode <nodename>

	mirror-metanode <nodename>

	list-nodes

	update-node <fqdn> <location>

	update-node [-i <seconds>]

	replication-manager

	transformation-manager

	add-representation <serviceid> <repid> <name> <distance> <count> <class> [parent]

	submit <serviceid> <assetid> <filename>
EOF
}

switch($cmd) {
  case 'list-metanodes' {
    print Dump($rt->listAssetTables());
  }
  case 'init-metanode' {
    exit_msg($rt->initAssetTable());
  }
  case 'init-peer-metanode' {
    my $remote_node = shift or (usage() && exit -1);
    exit_msg($rt->setupAssetQueue($remote_node));
  }
  case 'first-sync-peer-metanode' {
    my $remote_node = shift or (usage() && exit -1);
    exit_msg($rt->initialAssetSynch($remote_node));
  }
  case 'drop-peer-metanode' {
    my $remote_node = shift;
    exit_msg($rt->destroyAssetQueue($remote_node));
  }
  case 'mirror-metanode' {
    my $remote_node = shift or (usage() && exit -1);
    $rt->pullAssetTable($remote_node);
  }
  case 'list-nodes' {
    print Dump($rt->getNodes());
  }
  case 'update-node' {
    my $ip = Cornea::Utils::my_ip();
    my $fqdn = shift;
    my $location = shift;
    if(defined $fqdn) {
      # Adding a dot forces it to resolve outside search domains
      my @addr = gethostbyname("$fqdn.");
      die "fqdn '$fqdn' does not map to $ip\n"
        unless eval { $ip eq inet_ntoa($addr[4]); };
    }
    my ($total, $used) = Cornea::Utils::fsinfo($conf->get('Storage::base')."/.");
    my $min = $conf->get('Storage::minimum');
    $min = ($1*Cornea::Utils::units($2))/1024
      if ($min =~ /^(\d+)\s*([GBKMT])/i);
    my $state = (($total - $used) < $min) ? 'closed' : 'open';
    my @rv;
    if($interval) {
      fork() && exit(0);
      POSIX::setsid();
      fork() && exit(0);
    }
    do {
      @rv = $rt->updateNode($ip, { fqdn => $fqdn,
                                   state => $state,
                                   total_storage => $total,
                                   used_storage => $used,
                                   location => $location });
      sleep($interval);
    } while($interval);
    exit_msg(@rv);
  }
  case 'replication-manager' {
    Cornea->new()->worker($conf->get('MQ::queue_replicate'));
  }
  case 'transformation-manager' {
    Cornea->new()->worker($conf->get('MQ::queue_transform'));
  }
  case 'add-representation' {
    my ($service_id, $rep_id, $name, $distance, $count, $class, $parent) = @ARGV;
    exit_msg($rt->updateRepInfo($service_id, $rep_id,
                                { name => $name,
                                  distance => $distance,
                                  count => $count,
                                  parent => $parent,
                                  class => $class }));
  }
  case 'submit' {
    scalar(@ARGV) == 3 or (usage() and exit -1);
    my ($serviceid, $assetid, $filename) = @ARGV;
    my $file = IO::File->new("<$filename")
      or die "Cannot open file: '$filename'\n";
    Cornea->new()->submit($file, $serviceid, $assetid);
  }
  else {
    usage();
    exit();
  }
}

1;
